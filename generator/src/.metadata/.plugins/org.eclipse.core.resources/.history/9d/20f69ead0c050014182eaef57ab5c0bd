/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client;

import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.datefield.AbstractDateField;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.sequencebox.AbstractSequenceBox;
import org.eclipse.scout.rt.client.ui.form.fields.smartfield.AbstractSmartField;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.shared.ScoutTexts;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.client.WorkspaceForm.MainBox.SomeFieldsBox.ASequenceBox;
import ch.heigvd.bachelor.crescenzio.generator.client.WorkspaceForm.MainBox.SomeFieldsBox.ASequenceBox.ASequenceFrom;
import ch.heigvd.bachelor.crescenzio.generator.client.WorkspaceForm.MainBox.SomeFieldsBox.ASequenceBox.ASequenceTo;
import ch.heigvd.bachelor.crescenzio.generator.client.WorkspaceForm.MainBox.SomeFieldsBox.ASmartField;
import ch.heigvd.bachelor.crescenzio.generator.client.WorkspaceForm.MainBox.SomeFieldsBox.ATextField;
import ch.heigvd.bachelor.crescenzio.generator.shared.Icons;
import ch.heigvd.bachelor.crescenzio.generator.shared.WorkspaceFormData;

@FormData(value = WorkspaceFormData.class, sdkCommand = FormData.SdkCommand.CREATE)
public class WorkspaceForm extends AbstractForm {

  public WorkspaceForm() throws ProcessingException {
    super();
  }

  @Override
  protected boolean getConfiguredAskIfNeedSave() {
    return false;
  }

  @Override
  protected int getConfiguredDisplayHint() {
    return DISPLAY_HINT_VIEW;
  }

  @Override
  protected String getConfiguredDisplayViewId() {
    return VIEW_ID_W;
  }

  public ASequenceBox getASequenceBox() {
    return getFieldByClass(ASequenceBox.class);
  }

  public ASequenceFrom getASequenceFrom() {
    return getFieldByClass(ASequenceFrom.class);
  }

  public ASequenceTo getASequenceTo() {
    return getFieldByClass(ASequenceTo.class);
  }

  public ASmartField getASmartField() {
    return getFieldByClass(ASmartField.class);
  }

  public ATextField getATextField() {
    return getFieldByClass(ATextField.class);
  }

  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Override
    protected int getConfiguredGridColumnCount() {
      return 1;
    }

    @Override
    protected boolean getConfiguredScrollable() {
      return true;
    }

    @Order(10.0)
    public class SomeFieldsBox extends AbstractGroupBox {

      @Override
      protected String getConfiguredBorderDecoration() {
        return BORDER_DECORATION_SECTION;
      }

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("SomeFields");
      }

      @Order(10.0)
      public class ATextField extends AbstractStringField {

        @Override
        protected boolean getConfiguredFillHorizontal() {
          return false;
        }

        @Override
        protected String getConfiguredLabel() {
          return TEXTS.get("ATextField");
        }
      }

      @Order(20.0)
      public class ASmartField extends AbstractSmartField<Long> {

        @Override
        protected boolean getConfiguredFillHorizontal() {
          return false;
        }

        @Override
        protected String getConfiguredLabel() {
          return Texts.get("ASmartField");
        }
      }

      @Order(30.0)
      public class ASequenceBox extends AbstractSequenceBox {

        @Override
        protected boolean getConfiguredFillHorizontal() {
          return false;
        }

        @Override
        protected String getConfiguredLabel() {
          return TEXTS.get("ASequenceBox");
        }

        @Order(10.0)
        public class ASequenceFrom extends AbstractDateField {

          @Override
          protected String getConfiguredLabel() {
            return ScoutTexts.get("from");
          }
        }

        @Order(20.0)
        public class ASequenceTo extends AbstractDateField {

          @Override
          protected String getConfiguredLabel() {
            return ScoutTexts.get("to");
          }
        }
      }
    }

  }

  public class ViewHandler extends AbstractFormHandler {

    @Override
    protected void execLoad() throws ProcessingException {
    }
  }

  @Override
  protected String getConfiguredIconId() {
    return Icons.EclipseScout;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("Center");
  }

  public void startView() throws ProcessingException {
    startInternal(new WorkspaceForm().ViewHandler());
  }
}
