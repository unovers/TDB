/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client.forms.views;

import java.util.List;

import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.IFormField;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.client.ui.form.fields.tabbox.AbstractTabBox;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.client.forms.views.SQLDatabaseTableViewForm.MainBox.TablesBox;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.views.SQLDatabaseTableViewForm.MainBox.TablesBox.TableNameBox;
import ch.heigvd.bachelor.crescenzio.generator.dataset.SQLField;
import ch.heigvd.bachelor.crescenzio.generator.datasource.Datasource;
import ch.heigvd.bachelor.crescenzio.generator.datasource.MySQLDatasource;
import ch.heigvd.bachelor.crescenzio.generator.datasource.SQLDatasource;
import ch.heigvd.bachelor.crescenzio.generator.datasource.SQLTable;

/**
 * @author Fabio
 */
public class SQLDatabaseTableViewForm extends AbstractForm {

  private Datasource datasource;

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public SQLDatabaseTableViewForm(Datasource datasource) throws ProcessingException {
    super();
    this.datasource = datasource;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("DatasourceInfo");
  }

  public void startView() throws ProcessingException {
    startInternal(new SQLDatabaseTableViewForm.ViewHandler());
  }

  public class ViewHandler extends AbstractFormHandler {

    @Override
    protected void execLoad() throws ProcessingException {
    }

    @Override
    protected void execStore() throws ProcessingException {
    }
  }

  /**
   * @return the MainBox
   */
  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  /**
   * @return the TableNameBox
   */
  public TableNameBox getTableNameBox() {
    return getFieldByClass(TableNameBox.class);
  }

  /**
   * @return the TablesBox
   */
  public TablesBox getTablesBox() {
    return getFieldByClass(TablesBox.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Order(10.0)
    public class TablesBox extends AbstractTabBox {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("Tables");
      }

      @Order(10.0)
      public class TableNameBox extends AbstractGroupBox {

        @Override
        protected String getConfiguredLabel() {
          return TEXTS.get("TableName");
        }

        @Override
        protected void injectFieldsInternal(List<IFormField> fieldList) {
          SQLDatasource datasource = new MySQLDatasource("MySQL", "localhost", 3306, "example", "root", "");
          datasource.describe();

          for (SQLTable table : datasource.getTables()) {
            fieldList.add(new AbstractGroupBox() {
              @Override
              protected String getConfiguredLabel() {
                return table.getName();
              }

              protected void injectFieldsInternal(List<IFormField> fieldList) {
                for (SQLField field : table.getFields()) {

                  fieldList.add(new AbstractStringField() {
                    @Override
                    protected String getConfiguredLabel() {
                      return field.getName() + " " + field.getType();
                    }
                  });
                }
              }
            });
          }
        }
      }
    }
