/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client;

import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.textfield.AbstractTextField;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.client.LogsForm.MainBox.LogsField;
import ch.heigvd.bachelor.crescenzio.generator.shared.LogsFormData;

/**
 * @author Fabio
 */
@FormData(value = LogsFormData.class, sdkCommand = FormData.SdkCommand.CREATE)
public class LogsForm extends AbstractForm {

  private Long m_logsNr;

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public LogsForm() throws ProcessingException {
    super();
  }

  /**
   * @return the LogsNr
   */
  @FormData
  public Long getLogsNr() {
    return m_logsNr;
  }

  /**
   * @param logsNr
   *          the LogsNr to set
   */
  @FormData
  public void setLogsNr(Long logsNr) {
    m_logsNr = logsNr;
  }

  @Override
  protected boolean getConfiguredAskIfNeedSave() {
    return false;
  }

  @Override
  protected int getConfiguredDisplayHint() {
    return DISPLAY_HINT_VIEW;
  }

  @Override
  protected String getConfiguredDisplayViewId() {
    return VIEW_ID_S;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("Logs");
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startModify() throws ProcessingException {
    startInternal(new ViewHandler());
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startNew() throws ProcessingException {
    startInternal(new ViewHandler());
  }

  /**
   * @return the LogsField
   */
  public LogsField getLogsField() {
    return getFieldByClass(LogsField.class);
  }

  /**
   * @return the MainBox
   */
  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Order(10.0)
    public class LogsField extends AbstractTextField {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("Logs");
      }
    }
  }

  public class ViewHandler extends AbstractFormHandler {

    @Override
    protected void execLoad() throws ProcessingException {
    }
  }

  public void startView() throws ProcessingException {
    startInternal(new LogsForm().ViewHandler());
  }
}
