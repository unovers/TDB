package ch.heigvd.bachelor.crescenzio.generator.client;

import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.labelfield.AbstractLabelField;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.client.LogsForm.MainBox.LogsField;
import ch.heigvd.bachelor.crescenzio.generator.shared.Icons;
import ch.heigvd.bachelor.crescenzio.generator.shared.LogsFormData;

@FormData(value = LogsFormData.class, sdkCommand = FormData.SdkCommand.CREATE)
public class LogsForm extends AbstractForm {

  private Long LogsNr;

  public LogsForm() throws ProcessingException {
    super();
  }

  @Override
  protected boolean getConfiguredAskIfNeedSave() {
    return false;
  }

  @Override
  protected int getConfiguredDisplayHint() {
    return DISPLAY_HINT_VIEW;
  }

  @Override
  protected String getConfiguredDisplayViewId() {
    return VIEW_ID_S;
  }

  @Override
  protected String getConfiguredIconId() {
    return Icons.EclipseScout;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("Logs");
  }

  @FormData
  public Long getLogsNr() {
    return LogsNr;
  }

  @FormData
  public void setLogsNr(Long LogsNr) {
    this.LogsNr = LogsNr;
  }

  public void startModify() throws ProcessingException {
    startInternalExclusive(new LogsForm.ModifyHandler());
  }

  /**
   * @return the LogsField
   */
  public LogsField getLogsField() {
    return getFieldByClass(LogsField.class);
  }

  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Override
    protected int getConfiguredGridColumnCount() {
      return 1;
    }

    @Order(10.0)
    public class BottomField extends AbstractLabelField {

      @Override
      protected String getConfiguredFont() {
        return "BOLD";
      }

      @Override
      protected boolean getConfiguredLabelVisible() {
        return false;
      }

      @Override
      protected void execInitField() throws ProcessingException {
      }
    }

    @Order(20.0)
    public class LogsField extends AbstractStringField {

      @Override
      protected int getConfiguredGridH() {
        return 2;
      }

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("Note");
      }

      @Override
      protected int getConfiguredLabelPosition() {
        return LABEL_POSITION_ON_FIELD;
      }

      @Override
      protected boolean getConfiguredMultilineText() {
        return true;
      }

      @Override
      protected boolean getConfiguredWrapText() {
        return true;
      }
    }
  }

  public class ModifyHandler extends AbstractFormHandler {

    @Override
    public void execLoad() throws ProcessingException {
    }

    @Override
    public void execStore() throws ProcessingException {
    }
  }

}
