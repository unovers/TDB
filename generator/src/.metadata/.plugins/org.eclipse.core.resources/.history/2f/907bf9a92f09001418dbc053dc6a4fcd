/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs;

import java.util.List;

import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.IFormField;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractCancelButton;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.smartfield.AbstractSmartField;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.shared.ScoutTexts;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasourceTypeForm.MainBox.CancelButton;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasourceTypeForm.MainBox.DatasourceTypeField;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasourceTypeForm.MainBox.OkButton;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasourceTypeForm.MainBox.ProjectField;

/**
 * @author Fabio
 */
public class DatasourceTypeForm extends AbstractForm {

  private Long m_datasourceTypeNr;

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public DatasourceTypeForm() throws ProcessingException {
    super();
  }

  /**
   * @return the DatasourceTypeNr
   */
  @FormData
  public Long getDatasourceTypeNr() {
    return m_datasourceTypeNr;
  }

  /**
   * @param datasourceTypeNr
   *          the DatasourceTypeNr to set
   */
  @FormData
  public void setDatasourceTypeNr(Long datasourceTypeNr) {
    m_datasourceTypeNr = datasourceTypeNr;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("DatasourceType");
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startNew() throws ProcessingException {
    startInternal(new NewHandler());
  }

  /**
   * @return the CancelButton
   */
  public CancelButton getCancelButton() {
    return getFieldByClass(CancelButton.class);
  }

  /**
   * @return the DatasourceTypeField
   */
  public DatasourceTypeField getDatasourceTypeField() {
    return getFieldByClass(DatasourceTypeField.class);
  }

  /**
   * @return the MainBox
   */
  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  /**
   * @return the OkButton
   */
  public OkButton getOkButton() {
    return getFieldByClass(OkButton.class);
  }

  /**
   * @return the ProjectField
   */
  public ProjectField getProjectField() {
    return getFieldByClass(ProjectField.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Override
    protected int getConfiguredGridColumnCount() {
      return 1;
    }

    @Override
    protected int getConfiguredGridW() {
      return 1;
    }

    @Override
    protected int getConfiguredLabelPosition() {
      return LABEL_POSITION_LEFT;
    }

    @Override
    protected void injectFieldsInternal(List<IFormField> fieldList) {

        fieldList.add(new AbstractStringField() {
          @Override
          protected String getConfiguredLabel() {
            return TEXTS.get("Name");
          }
        });
      }

    @Order(10.0)
    public class DatasourceTypeField extends AbstractSmartField<String> {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("DatasourceType");
      }

      @Override
      protected int getConfiguredLabelWidthInPixel() {
        return 150;
      }
    }

    @Order(20.0)
    public class ProjectField extends AbstractSmartField<String> {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("Project");
      }

      @Override
      protected int getConfiguredLabelWidthInPixel() {
        return 150;
      }
    }

    @Order(30.0)
    public class OkButton extends AbstractOkButton {
      @Override
      protected String getConfiguredLabel() {
        return ScoutTexts.get("NextButton");
      }

      @Override
      protected String getConfiguredTooltipText() {
        return ScoutTexts.get("NextDatasourceButtonTip");
      }
    }

    @Order(40.0)
    public class CancelButton extends AbstractCancelButton {
    }
  }

  public class NewHandler extends AbstractFormHandler {
  }
}
