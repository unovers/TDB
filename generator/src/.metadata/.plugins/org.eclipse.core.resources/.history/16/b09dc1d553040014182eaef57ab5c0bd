/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client;

import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractCancelButton;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.client.LogsForm.MainBox.CancelButton;
import ch.heigvd.bachelor.crescenzio.generator.client.LogsForm.MainBox.OkButton;
import ch.heigvd.bachelor.crescenzio.generator.shared.LogsFormData;

/**
 * @author Fabio
 */
@FormData(value = LogsFormData.class, sdkCommand = FormData.SdkCommand.CREATE)
public class LogsForm extends AbstractForm {

  private Long m_logsNr;

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public LogsForm() throws ProcessingException {
    super();
  }

  /**
   * @return the LogsNr
   */
  @FormData
  public Long getLogsNr() {
    return m_logsNr;
  }

  /**
   * @param logsNr
   *          the LogsNr to set
   */
  @FormData
  public void setLogsNr(Long logsNr) {
    m_logsNr = logsNr;
  }

  @Override
  protected boolean getConfiguredAskIfNeedSave() {
    return false;
  }

  @Override
  protected int getConfiguredDisplayHint() {
    return DISPLAY_HINT_VIEW;
  }

  @Override
  protected String getConfiguredDisplayViewId() {
    return VIEW_ID_S;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("Logs");
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startModify() throws ProcessingException {
    startInternal(new ViewHandler());
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startNew() throws ProcessingException {
    startInternal(new ViewHandler());
  }

  /**
   * @return the CancelButton
   */
  public CancelButton getCancelButton() {
    return getFieldByClass(CancelButton.class);
  }

  /**
   * @return the MainBox
   */
  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  /**
   * @return the OkButton
   */
  public OkButton getOkButton() {
    return getFieldByClass(OkButton.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Order(10.0)
    public class OkButton extends AbstractOkButton {
    }

    @Order(20.0)
    public class CancelButton extends AbstractCancelButton {
    }
  }

  public class ViewHandler extends AbstractFormHandler {

    @Override
    protected void execLoad() throws ProcessingException {
      //open form code
    }

    @Override
    protected boolean getConfiguredOpenExclusive() {
      return true;
    }
  }

  public void startView() throws ProcessingException {
    startInternalExclusive(new LogsForm.ViewHandler());
  }

  @Override
  public Object computeExclusiveKey() throws ProcessingException {
    return 1;
  }

}
