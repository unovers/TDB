/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs;

import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.basic.cell.Cell;
import org.eclipse.scout.rt.client.ui.basic.table.ITableRow;
import org.eclipse.scout.rt.client.ui.basic.table.columns.AbstractSmartColumn;
import org.eclipse.scout.rt.client.ui.basic.table.columns.AbstractStringColumn;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractCancelButton;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.smartfield.AbstractSmartField;
import org.eclipse.scout.rt.client.ui.form.fields.smartfield.ContentAssistFieldTable;
import org.eclipse.scout.rt.shared.ScoutTexts;
import org.eclipse.scout.rt.shared.TEXTS;
import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.services.lookup.ILookupCall;

import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasourceTypeForm.MainBox.CancelButton;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasourceTypeForm.MainBox.DatasourceTypeField;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasourceTypeForm.MainBox.OkButton;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ServerTypeForm.MainBox.ProjectField;
import ch.heigvd.bachelor.crescenzio.generator.client.services.lookup.DatasourcesTypeLookupCall;
import ch.heigvd.bachelor.crescenzio.generator.shared.Icons;

/**
 * @author Fabio
 */
public class DatasourceTypeForm extends AbstractForm {

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public DatasourceTypeForm() throws ProcessingException {
    super();
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("DatasourceType");
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startNew() throws ProcessingException {
    startInternal(new NewHandler());
  }

  /**
   * @return the CancelButton
   */
  public CancelButton getCancelButton() {
    return getFieldByClass(CancelButton.class);
  }

  /**
   * @return the DatasourceTypeField
   */
  public DatasourceTypeField getDatasourceTypeField() {
    return getFieldByClass(DatasourceTypeField.class);
  }

  /**
   * @return the MainBox
   */
  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  /**
   * @return the OkButton
   */
  public OkButton getOkButton() {
    return getFieldByClass(OkButton.class);
  }

  /**
   * @return the ProjectField
   */
  public ProjectField getProjectField() {
    return getFieldByClass(ProjectField.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Override
    protected int getConfiguredGridColumnCount() {
      return 1;
    }

    @Override
    protected int getConfiguredGridW() {
      return 1;
    }

    @Override
    protected int getConfiguredLabelPosition() {
      return LABEL_POSITION_LEFT;
    }

    @Order(10.0)
    public class DatasourceTypeField extends AbstractSmartField<String> {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("DatasourceType");
      }

      @Override
      protected int getConfiguredLabelWidthInPixel() {
        return 150;
      }
    }

    @Order(20.0)
    public class SmartField extends AbstractSmartField<Long> {

      @Override
      protected String getConfiguredLabel() {
        return "A smart field";
      }

      @Override
      protected Class<? extends ILookupCall<Long>> getConfiguredLookupCall() {
        return DatasourcesLookupCall.class;
      }

      public class Table extends ContentAssistFieldTable<Long> {

        @Override
        protected String getConfiguredDefaultIconId() {
          return Icons.EclipseScout;
        }

        @Override
        protected boolean getConfiguredHeaderVisible() {
          return true;
        }

        @Order(40)
        public class AdditionalInfoColumn extends AbstractStringColumn {
          @Override
          protected String getConfiguredHeaderText() {
            return TEXTS.get("AdditionalInfo");
          }

          @Override
          protected int getConfiguredWidth() {
            return 200;
          }
        }

        @Order(50)
        public class CompanyTypeColumn extends AbstractSmartColumn<Long> {
          @Override
          protected String getConfiguredHeaderText() {
            return TEXTS.get("CompanyType");
          }

          @Override
          protected int getConfiguredWidth() {
            return 200;
          }

          @Override
          protected Class<? extends ILookupCall<Long>> getConfiguredLookupCall() {
            return DatasourcesTypeLookupCall.class;
          }

          @Override
          protected void execDecorateCell(Cell cell, ITableRow row) throws ProcessingException {
            decorateCellWithLookupRow(cell, row);
          }
        }
      }
    }

    @Order(30.0)
    public class OkButton extends AbstractOkButton {
      @Override
      protected String getConfiguredLabel() {
        return ScoutTexts.get("NextButton");
      }

      @Override
      protected String getConfiguredTooltipText() {
        return ScoutTexts.get("NextDatasourceButtonTip");
      }
    }

    @Order(40.0)
    public class CancelButton extends AbstractCancelButton {
    }
  }

  public class NewHandler extends AbstractFormHandler {
  }

  public class DatasourcesSmartTableData extends AbstractTableRowData {

    private static final long serialVersionUID = 1L;

    public static final String additionalInfo = "additionalInfo";
    public static final String companyType = "companyType";
    private String m_additionalInfo;
    private Long m_companyType;

    public DatasourcesSmartTableData() {
    }

    public DatasourcesSmartTableData(String additionalInfo, Long companyType) {
      m_additionalInfo = additionalInfo;
      m_companyType = companyType;
    }

    public String getAdditionalInfo() {
      return m_additionalInfo;
    }

    public void setAdditionalInfo(String additionalInfo) {
      m_additionalInfo = additionalInfo;
    }

    public Long getCompanyType() {
      return m_companyType;
    }

    public void setCompanyType(Long companyType) {
      m_companyType = companyType;
    }

  }

}
