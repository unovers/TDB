/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs;

import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractCancelButton;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.client.ui.form.fields.smartfield.AbstractSmartField;
import org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;
import org.eclipse.scout.rt.shared.TEXTS;
import org.eclipse.scout.rt.shared.services.lookup.ILookupCall;

import ch.heigvd.bachelor.crescenzio.generator.Project;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ServerInputForm.MainBox.CancelButton;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ServerInputForm.MainBox.HostnameField;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ServerInputForm.MainBox.NameField;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ServerInputForm.MainBox.OkButton;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ServerInputForm.MainBox.RootFolderField;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ServerInputForm.MainBox.ServerTypeSmartField;
import ch.heigvd.bachelor.crescenzio.generator.client.services.lookup.ServerTypeLookupCall;
import ch.heigvd.bachelor.crescenzio.generator.client.ui.desktop.Desktop;
import ch.heigvd.bachelor.crescenzio.generator.server.Server;
import ch.heigvd.bachelor.crescenzio.generator.shared.ConfigureServerFormData;

/**
 * @author Fabio
 */
@FormData(value = ConfigureServerFormData.class, sdkCommand = FormData.SdkCommand.CREATE)
public class ServerInputForm extends AbstractForm {

  private Project project;

  /**
   * @param project
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public ServerInputForm(Project project) throws ProcessingException {
    super();
    this.project = project;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("ConfigureServer");
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startModify() throws ProcessingException {
    startInternal(new ModifyHandler());
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startNew() throws ProcessingException {
    startInternal(new NewHandler());
  }

  /**
   * @return the CancelButton
   */
  public CancelButton getCancelButton() {
    return getFieldByClass(CancelButton.class);
  }

  /**
   * @return the HostnameField
   */
  public HostnameField getHostnameField() {
    return getFieldByClass(HostnameField.class);
  }

  /**
   * @return the MainBox
   */
  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  /**
   * @return the NameField
   */
  public NameField getNameField() {
    return getFieldByClass(NameField.class);
  }

  /**
   * @return the OkButton
   */
  public OkButton getOkButton() {
    return getFieldByClass(OkButton.class);
  }

  /**
   * @return the RootFolderField
   */
  public RootFolderField getRootFolderField() {
    return getFieldByClass(RootFolderField.class);
  }

  /**
   * @return the ServerTypeField
   */
  public ServerTypeSmartField getServerTypeSmartField() {
    return getFieldByClass(ServerTypeSmartField.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Override
    protected int getConfiguredGridColumnCount() {
      return 1;
    }

    @Order(10.0)
    public class ServerTypeSmartField extends AbstractSmartField<String> {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("ServerType");
      }

      @Override
      protected Class<? extends ILookupCall<String>> getConfiguredLookupCall() {
        return ServerTypeLookupCall.class;
      }

      @Override
      protected int getConfiguredLabelWidthInPixel() {
        return 150;
      }

      @Override
      protected boolean getConfiguredMandatory() {
        return true;
      }

    }

    @Order(20.0)
    public class NameField extends AbstractStringField {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("Name");
      }

      @Override
      protected int getConfiguredLabelWidthInPixel() {
        return 150;
      }

      @Override
      protected boolean getConfiguredMandatory() {
        return true;
      }
    }

    @Order(30.0)
    public class HostnameField extends AbstractStringField {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("Hostname");
      }

      @Override
      protected int getConfiguredLabelWidthInPixel() {
        return 150;
      }

      @Override
      protected boolean getConfiguredMandatory() {
        return true;
      }
    }

    @Order(40.0)
    public class RootFolderField extends AbstractStringField {

      @Override
      protected String getConfiguredLabel() {
        return TEXTS.get("RootFolder");
      }

      @Override
      protected int getConfiguredLabelWidthInPixel() {
        return 150;
      }

      @Override
      protected boolean getConfiguredMandatory() {
        return true;
      }
    }

    @Order(50.0)
    public class OkButton extends AbstractOkButton {
    }

    @Order(60.0)
    public class CancelButton extends AbstractCancelButton {
    }
  }

  public class ModifyHandler extends AbstractFormHandler {
    @Override
    protected void execLoad() throws ProcessingException {
      Server server = project.getServer();
      getRootFolderField().setValue(server.getRootFolder());
      getHostnameField().setValue(server.getHost());
      try {
        Desktop desktop = (Desktop) getDesktop();
        String pckage = "ch.heigvd.bachelor.crescenzio.generator.server";
        String clss = pckage + "." + getServerTypeSmartField().getValue() + "Server";
        Class datasourceClass = Class.forName(clss);

        java.lang.reflect.Constructor constructor = datasourceClass.getConstructor(new Class[]{String.class, String.class});
        Server server = (Server) constructor.newInstance(getHostnameField().getValue(), getRootFolderField().getValue());
        project.setServer(server);
        desktop.refreshWorkspace();
      }
      catch (Exception e) {
        throw new ProcessingException(e.toString());
      }
    }

    @Override
    protected void execStore() throws ProcessingException {

    }
  }

  public class NewHandler extends AbstractFormHandler {
    @Override
    protected void execStore() throws ProcessingException {
      try {
        Desktop desktop = (Desktop) getDesktop();
        String pckage = "ch.heigvd.bachelor.crescenzio.generator.server";
        String clss = pckage + "." + getServerTypeSmartField().getValue() + "Server";
        Class datasourceClass = Class.forName(clss);

        java.lang.reflect.Constructor constructor = datasourceClass.getConstructor(new Class[]{String.class, String.class});
        Server server = (Server) constructor.newInstance(getHostnameField().getValue(), getRootFolderField().getValue());
        project.setServer(server);
        desktop.refreshWorkspace();
      }
      catch (Exception e) {
        throw new ProcessingException(e.toString());
      }
    }

  }
}
