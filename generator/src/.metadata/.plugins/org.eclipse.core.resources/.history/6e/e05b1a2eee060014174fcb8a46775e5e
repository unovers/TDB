/**
 *
 */
package ch.heigvd.bachelor.crescenzio.generator.client;

import org.eclipse.scout.commons.annotations.FormData;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractCancelButton;
import org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.client.InjecterForm.MainBox.CancelButton;
import ch.heigvd.bachelor.crescenzio.generator.client.InjecterForm.MainBox.OkButton;

/**
 * @author Fabio
 */
public class InjecterForm extends AbstractForm {

  private Long m_injecterFormNr;

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public InjecterForm() throws ProcessingException {
    super();
  }

  /**
   * @return the InjecterFormNr
   */
  @FormData
  public Long getInjecterFormNr() {
    return m_injecterFormNr;
  }

  /**
   * @param injecterFormNr
   *          the InjecterFormNr to set
   */
  @FormData
  public void setInjecterFormNr(Long injecterFormNr) {
    m_injecterFormNr = injecterFormNr;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("InjecterForm");
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startModify() throws ProcessingException {
    startInternal(new ModifyHandler());
  }

  /**
   * @throws org.eclipse.scout.commons.exception.ProcessingException
   */
  public void startNew() throws ProcessingException {
    startInternal(new NewHandler());
  }

  /**
   * @return the CancelButton
   */
  public CancelButton getCancelButton() {
    return getFieldByClass(CancelButton.class);
  }

  /**
   * @return the MainBox
   */
  public MainBox getMainBox() {
    return getFieldByClass(MainBox.class);
  }

  /**
   * @return the OkButton
   */
  public OkButton getOkButton() {
    return getFieldByClass(OkButton.class);
  }

  @Order(10.0)
  public class MainBox extends AbstractGroupBox {

    @Order(10.0)
    public class OkButton extends AbstractOkButton {
    }

    @Order(20.0)
    public class CancelButton extends AbstractCancelButton {
    }
  }

  public class ModifyHandler extends AbstractFormHandler {
  }

  public class NewHandler extends AbstractFormHandler {

    @Override
    protected boolean getConfiguredGuiLess() {
      return true;
    }

    @Override
    protected void execLoad() throws ProcessingException {
      //TODO [Fabio] Auto-generated method stub.
      super.execLoad();
    }

    @Override
    protected void execPostLoad() throws ProcessingException {
      //TODO [Fabio] Auto-generated method stub.

      super.execPostLoad();
    }

    @Override
    protected void execStore() throws ProcessingException {
      //TODO [Fabio] Auto-generated method stub.
      super.execStore();
    }
  }
}
