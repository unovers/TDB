/**
 * 
 */
package ch.heigvd.bachelor.crescenzio.generator.shared.forms.inputs;

import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public abstract class NewDatasourceFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public NewDatasourceFormData() {
  }

  public DatabaseHost getDatabaseHost() {
    return getFieldByClass(DatabaseHost.class);
  }

  public DatabaseLogin getDatabaseLogin() {
    return getFieldByClass(DatabaseLogin.class);
  }

  public DatabaseName getDatabaseName() {
    return getFieldByClass(DatabaseName.class);
  }

  public DatabasePassword getDatabasePassword() {
    return getFieldByClass(DatabasePassword.class);
  }

  public DatabasePort getDatabasePort() {
    return getFieldByClass(DatabasePort.class);
  }

  public Name getName() {
    return getFieldByClass(Name.class);
  }

  public Project getProject() {
    return getFieldByClass(Project.class);
  }

  public static class DatabaseHost extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabaseHost() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DatabaseLogin extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabaseLogin() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DatabaseName extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabaseName() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DatabasePassword extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabasePassword() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DatabasePort extends AbstractValueFieldData<Integer> {

    private static final long serialVersionUID = 1L;

    public DatabasePort() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_VALUE, Integer.MAX_VALUE);
      ruleMap.put(ValidationRule.MIN_VALUE, Integer.MIN_VALUE);
    }
  }

  public static class Name extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Name() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class Project extends AbstractValueFieldData<ch.heigvd.bachelor.crescenzio.generator.Project> {

    private static final long serialVersionUID = 1L;

    public Project() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      /**
       * XXX not processed ValidationRule(lookupCall)
       * 'ProjectLookupCall.class' is not accessible from here.
       * at ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.SQLDatasourceInputForm.MainBox.ProjectField#
       * getConfiguredLookupCall
       */
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.ZERO_NULL_EQUALITY, true);
    }
  }
}
