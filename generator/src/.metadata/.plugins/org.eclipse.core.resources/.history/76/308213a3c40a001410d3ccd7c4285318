package ch.heigvd.bachelor.crescenzio.generator.client.ui.desktop;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.eclipse.scout.commons.CollectionUtility;
import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.commons.logger.IScoutLogger;
import org.eclipse.scout.commons.logger.ScoutLogManager;
import org.eclipse.scout.rt.client.ClientSyncJob;
import org.eclipse.scout.rt.client.ui.action.keystroke.AbstractKeyStroke;
import org.eclipse.scout.rt.client.ui.action.menu.AbstractMenu;
import org.eclipse.scout.rt.client.ui.action.menu.IMenu;
import org.eclipse.scout.rt.client.ui.action.menu.IMenuType;
import org.eclipse.scout.rt.client.ui.desktop.IDesktop;
import org.eclipse.scout.rt.client.ui.desktop.outline.AbstractOutlineViewButton;
import org.eclipse.scout.rt.client.ui.desktop.outline.IOutline;
import org.eclipse.scout.rt.client.ui.desktop.outline.pages.IPage;
import org.eclipse.scout.rt.client.ui.form.ScoutInfoForm;
import org.eclipse.scout.rt.client.ui.form.outline.DefaultOutlineTableForm;
import org.eclipse.scout.rt.client.ui.form.outline.DefaultOutlineTreeForm;
import org.eclipse.scout.rt.extension.client.ui.action.menu.AbstractExtensibleMenu;
import org.eclipse.scout.rt.extension.client.ui.desktop.AbstractExtensibleDesktop;
import org.eclipse.scout.rt.shared.TEXTS;

import ch.heigvd.bachelor.crescenzio.generator.Project;
import ch.heigvd.bachelor.crescenzio.generator.client.ClientSession;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.AbstractInputForm;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.DatasetSelectProjectForm;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.OutputApplicationTypeForm;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs.ProjectInputForm;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.views.LogsViewForm;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.views.ProjectViewForm;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.views.SQLDatabaseTableViewForm;
import ch.heigvd.bachelor.crescenzio.generator.client.forms.views.StartForm;
import ch.heigvd.bachelor.crescenzio.generator.client.ui.desktop.Desktop.EditMenu.EditProjectMenu;
import ch.heigvd.bachelor.crescenzio.generator.client.ui.desktop.outlines.StandardOutline;
import ch.heigvd.bachelor.crescenzio.generator.datasources.MySQLDatasource;
import ch.heigvd.bachelor.crescenzio.generator.datasources.SQLDatasource;
import ch.heigvd.bachelor.crescenzio.generator.shared.Icons;

public class Desktop extends AbstractExtensibleDesktop implements IDesktop {
  private static IScoutLogger logger = ScoutLogManager.getLogger(Desktop.class);
  //private LogsViewForm logs;
  private StartForm startForm;
  private ProjectViewForm projectInfoForm;
  private LogsViewForm logsForm;
  private LinkedList<Project> projects;
  private DefaultOutlineTreeForm treeForm;
  private DefaultOutlineTableForm tableForm;
  private HashMap<Project, ProjectViewForm> projectsInfoForms;

  public Desktop() {
    projects = new LinkedList<Project>();
    projectsInfoForms = new HashMap<Project, ProjectViewForm>();
  }

  @Override
  protected List<Class<? extends IOutline>> getConfiguredOutlines() {
    List<Class<? extends IOutline>> outlines = new ArrayList<Class<? extends IOutline>>();
    outlines.add(StandardOutline.class);
    return outlines;
  }

  @Override
  protected String getConfiguredTitle() {
    return TEXTS.get("ApplicationTitle");
  }

  @Override
  protected void execOpened() throws ProcessingException {
    getMenu(EditProjectMenu.class).setEnabled(false);

    if (Project.getAll() == null || Project.getAll().size() == 0) {
      startForm = new StartForm();
      startForm.startView();
    }
    else {
      initWorkspace();
    }
  }

  @Order(10.0)
  public class FileMenu extends AbstractMenu {

    @Override
    protected String getConfiguredText() {
      return TEXTS.get("FileMenu");
    }

    @Order(10.0)
    public class NewMenu extends AbstractExtensibleMenu {

      @Override
      protected String getConfiguredKeyStroke() {
        return null;
      }

      @Override
      protected String getConfiguredText() {
        return TEXTS.get("New");
      }

      @Order(10.0)
      public class ProjectMenu extends AbstractExtensibleMenu {

        @Override
        protected String getConfiguredKeyStroke() {
          return null;
        }

        @Override
        protected String getConfiguredText() {
          return TEXTS.get("Project");
        }

        @Override
        protected void execAction() throws ProcessingException {

          ProjectInputForm form = new ProjectInputForm();
          form.startNew();
        }
      }

      @Order(20.0)
      public class DatasourceMenu extends AbstractExtensibleMenu {

        @Override
        protected Set<? extends IMenuType> getConfiguredMenuTypes() {
          return CollectionUtility.<IMenuType> hashSet();
        }

        @Override
        protected void injectActionNodesInternal(List<IMenu> nodeList) {
          String[] datasources = new String[]{"MySQLDatasource"};
          for (String datasource : datasources) {
            nodeList.add(new AbstractExtensibleMenu() {

              @Override
              protected String getConfiguredKeyStroke() {
                return null;
              }

              @Override
              protected String getConfiguredText() {
                return TEXTS.get(datasource);
              }

              @Override
              protected void execAction() throws ProcessingException {
                try {
                  String pckage = "ch.heigvd.bachelor.crescenzio.generator.client.forms.inputs";
                  String clss = pckage + "." + datasource + "InputForm";
                  Class datasourceClass = Class.forName(clss);
                  java.lang.reflect.Constructor constructor = datasourceClass.getConstructor(new Class[]{});
                  AbstractInputForm form = (AbstractInputForm) constructor.newInstance();
                  form.startNew();
                }
                catch (Exception e) {
                  throw new ProcessingException(e.toString());
                }
              }
            });
          }
        }

        @Override
        protected String getConfiguredText() {
          return TEXTS.get("Datasource");
        }
      }

      @Order(30.0)
      public class DatasetMenu extends AbstractExtensibleMenu {

        @Override
        protected Set<? extends IMenuType> getConfiguredMenuTypes() {
          return CollectionUtility.<IMenuType> hashSet();
        }

        @Override
        protected String getConfiguredText() {
          return TEXTS.get("dataset");
        }

        @Override
        protected void injectActionNodesInternal(List<IMenu> nodeList) {
          String[] datasets = new String[]{"MySQLDataset"};
          for (String dataset : datasets) {
            nodeList.add(new AbstractExtensibleMenu() {

              @Override
              protected String getConfiguredKeyStroke() {
                return null;
              }

              @Override
              protected String getConfiguredText() {
                return TEXTS.get(dataset);
              }

              @Override
              protected void execAction() throws ProcessingException {
                new DatasetSelectProjectForm(dataset).startNew();
              }
            });
          }
        }
      }

      @Order(40.0)
      public class OutputMenu extends AbstractExtensibleMenu {

        @Override
        protected Set<? extends IMenuType> getConfiguredMenuTypes() {
          return CollectionUtility.<IMenuType> hashSet();
        }

        @Override
        protected String getConfiguredText() {
          return TEXTS.get("Output");
        }

        @Override
        protected void execAction() throws ProcessingException {
          OutputApplicationTypeForm form = new OutputApplicationTypeForm();
          form.startNew();
        }
      }
    }

    @Order(20.0)
    public class ExitMenu extends AbstractMenu {

      @Override
      protected String getConfiguredText() {
        return TEXTS.get("ExitMenu");
      }

      @Override
      public void execAction() throws ProcessingException {
        ClientSyncJob.getCurrentSession(ClientSession.class).stopSession();
      }
    }
  }

  @Order(60.0)
  public class ToolsMenu extends AbstractMenu {

    @Override
    protected String getConfiguredText() {
      return TEXTS.get("ToolsMenu");
    }

    @Order(10.0)
    public class AfficherDetailsProjetMenu extends AbstractExtensibleMenu {

      @Override
      protected String getConfiguredText() {
        return TEXTS.get("AfficherDetailsProjet");
      }

      @Override
      protected void execAction() throws ProcessingException {
      }
    }
  }

  @Order(100.0)
  public class HelpMenu extends AbstractMenu {

    @Override
    protected String getConfiguredText() {
      return TEXTS.get("HelpMenu");
    }

    @Order(10.0)
    public class AboutMenu extends AbstractMenu {

      @Override
      protected String getConfiguredText() {
        return TEXTS.get("AboutMenu");
      }

      @Override
      public void execAction() throws ProcessingException {
        ScoutInfoForm form = new ScoutInfoForm();
        form.startModify();
      }
    }
  }

  @Order(10.0)
  public class RefreshOutlineKeyStroke extends AbstractKeyStroke {

    @Override
    protected String getConfiguredKeyStroke() {
      return "f5";
    }

    @Override
    protected void execAction() throws ProcessingException {
      if (getOutline() != null) {
        IPage page = getOutline().getActivePage();
        if (page != null) {
          page.reloadPage();
        }
      }
    }
  }

  @Order(40.0)
  public class EditMenu extends AbstractExtensibleMenu {

    @Override
    protected String getConfiguredText() {
      return TEXTS.get("Edition");
    }

    @Override
    protected void execAction() throws ProcessingException {
    }

    @Order(10.0)
    public class EditProjectMenu extends AbstractExtensibleMenu {

      @Override
      protected String getConfiguredText() {
        return TEXTS.get("EditProject");
      }

      @Override
      protected void execAction() throws ProcessingException {
        ProjectInputForm form = new ProjectInputForm();
        form.startModify();
      }
    }
  }

  @Order(10.0)
  public class StandardOutlineViewButton extends AbstractOutlineViewButton {

    /**
     *
     */
    public StandardOutlineViewButton() {
      super(Desktop.this, StandardOutline.class);
    }
  }

  public LinkedList<Project> getProjects() {
    return projects;
  }

  public void refreshWorkspace() throws ProcessingException {
    if (treeForm != null && !treeForm.isShowing()) {
      treeForm.startView();
    }
    if (getOutline() != null) getOutline().resetOutline();
  }

//
//  /**
//   * @param string
//   */
//  public void Log(String string) {
//    logsForm.getLogsField().setValue(string);
//  }

  @SuppressWarnings("hiding")
  public void displayProjectInfo(Project project) throws ProcessingException {
    if (projectsInfoForms.get(project) != null) {
      projectsInfoForms.get(project).doClose();
      projectsInfoForms.remove(project);
    }

    projectsInfoForms.put(project, new ProjectViewForm(project));
  }

  @SuppressWarnings("hiding")
  public void createProject(Project project) {
    projects.add(project);
  }

  @SuppressWarnings("hiding")
  public void removeProject(Project project) {
    projects.remove(project);
  }

  /**
   * @throws ProcessingException
   */
  public void closeStartForm() throws ProcessingException {
    startForm.doClose();
  }

  /**
   * @throws ProcessingException
   */
  public void initWorkspace() throws ProcessingException {

    // outline tree
    if (treeForm == null) {
      treeForm = new DefaultOutlineTreeForm();
      treeForm.setIconId(Icons.EclipseScout);
      treeForm.startView();
    }

    //outline table
    if (tableForm == null) {
      tableForm = new DefaultOutlineTableForm();
      tableForm.setIconId(Icons.EclipseScout);
      tableForm.startView();
    }

    IOutline firstOutline = CollectionUtility.firstElement(getAvailableOutlines());
    if (firstOutline != null) {
      setOutline(firstOutline);
    }

//    logsForm = new LogsViewForm();
//    logsForm.startModify();

  }
}
