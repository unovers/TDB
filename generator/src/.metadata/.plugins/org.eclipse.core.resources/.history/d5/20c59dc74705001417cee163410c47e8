/**
 * 
 */
package ch.heigvd.bachelor.crescenzio.generator.shared;

import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class LogsFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public LogsFormData() {
  }

  public Bottom getBottom() {
    return getFieldByClass(Bottom.class);
  }

  /**
   * access method for property LogsNr.
   */
  public Long getLogsNr() {
    return getLogsNrProperty().getValue();
  }

  /**
   * access method for property LogsNr.
   */
  public void setLogsNr(Long logsNr) {
    getLogsNrProperty().setValue(logsNr);
  }

  public LogsNrProperty getLogsNrProperty() {
    return getPropertyByClass(LogsNrProperty.class);
  }

  public Note getNote() {
    return getFieldByClass(Note.class);
  }

  public static class Bottom extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Bottom() {
    }
  }

  public static class LogsNrProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;

    public LogsNrProperty() {
    }
  }

  public static class Note extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public Note() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }
}
